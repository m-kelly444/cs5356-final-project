'use client';
import { useState, useEffect } from 'react';

// VulnerabilityTable component
// Displays a list of critical vulnerabilities from NVD and CISA KEV

import { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';

interface Vulnerability {
  id: string;
  title: string;
  severity: string;
  score: number;
  published: string;
  vector?: string;
}

interface VulnerabilityTableProps {
  vulnerabilities: Vulnerability[];
}

const VulnerabilityTable: React.FC<VulnerabilityTableProps> = ({ vulnerabilities }) => {
  const [expandedVuln, setExpandedVuln] = useState<string | null>(null);
  
  // Toggle expanded state for a vulnerability
  const toggleExpand = (id: string) => {
    if (expandedVuln === id) {
      setExpandedVuln(null);
    } else {
      setExpandedVuln(id);
    }
  };
  
  // Get the CSS class based on severity
  const getSeverityClass = (severity: string) => {
    const severityLower = severity.toLowerCase();
    
    if (severityLower === 'critical') {
      return 'bg-red-500 text-white';
    } else if (severityLower === 'high') {
      return 'bg-orange-500 text-white';
    } else if (severityLower === 'medium') {
      return 'bg-yellow-500 text-black';
    } else if (severityLower === 'low') {
      return 'bg-blue-500 text-white';
    } else {
      return 'bg-gray-500 text-white';
    }
  };
  
  // Format CVSS vector string into readable parts
  const formatVectorString = (vector?: string) => {
    if (!vector) return null;
    
    // Parse CVSS3 vector string
    if (vector.startsWith('CVSS:3')) {
      const parts = vector.replace('CVSS:3.1/', '').split('/');
      return (
        <div className="grid grid-cols-2 gap-x-4 gap-y-1 text-xs">
          {parts.map((part, index) => {
            const [key, value] = part.split(':');
            return (
              <div key={index} className="flex justify-between">
                <span className="text-gray-400">{key}:</span>
                <span className="text-gray-300">{value}</span>
              </div>
            );
          })}
        </div>
      );
    }
    
    return (
      <div className="text-xs text-gray-300">
        {vector}
      </div>
    );
  };
  
  // Display a message if no vulnerabilities are provided
  if (!vulnerabilities.length) {
    return (
      <div className="text-center py-6 text-gray-400">
        No critical vulnerabilities found.
      </div>
    );
  }
  
  return (
    <div className="space-y-3">
      {vulnerabilities.map((vuln) => (
        <motion.div
          key={vuln.id}
          className="border border-gray-700 rounded-md overflow-hidden bg-gray-800/50 backdrop-blur-sm shadow-md"
          initial={{ opacity: 0, y: 10 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.3 }}
        >
          <div 
            className="p-3 cursor-pointer hover:bg-gray-700/50 transition-colors"
            onClick={() => toggleExpand(vuln.id)}
          >
            <div className="flex justify-between items-start">
              <div className="flex-1">
                <div className="flex items-center space-x-2">
                  <span className="font-mono text-xs text-cyan-400">{vuln.id}</span>
                  <span 
                    className={`text-xs px-2 py-0.5 rounded-full ${getSeverityClass(vuln.severity)}`}
                  >
                    {vuln.severity} {vuln.score ? `(${vuln.score.toFixed(1)})` : ''}
                  </span>
                </div>
                <h3 className="text-sm mt-1 pr-4 line-clamp-2">
                  {vuln.title}
                </h3>
              </div>
              <div className="flex flex-col items-end">
                <svg 
                  xmlns="http://www.w3.org/2000/svg" 
                  className={`h-4 w-4 text-gray-400 transition-transform duration-300 ${expandedVuln === vuln.id ? 'rotate-180' : ''}`} 
                  fill="none" 
                  viewBox="0 0 24 24" 
                  stroke="currentColor"
                >
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                </svg>
                <span className="text-xs text-gray-500 mt-1">{vuln.published}</span>
              </div>
            </div>
          </div>
          
          <AnimatePresence>
            {expandedVuln === vuln.id && (
              <motion.div
                initial={{ height: 0, opacity: 0 }}
                animate={{ height: 'auto', opacity: 1 }}
                exit={{ height: 0, opacity: 0 }}
                transition={{ duration: 0.3 }}
                className="px-3 pb-3 border-t border-gray-700 pt-3"
              >
                <div className="mb-3">
                  <h4 className="text-xs font-bold text-gray-400 mb-1">Description</h4>
                  <p className="text-sm text-gray-300">{vuln.title}</p>
                </div>
                
                {vuln.vector && (
                  <div className="mb-3">
                    <h4 className="text-xs font-bold text-gray-400 mb-1">Attack Vector</h4>
                    {formatVectorString(vuln.vector)}
                  </div>
                )}
                
                <div className="text-center mt-4">
                  <a
                    href={`https://nvd.nist.gov/vuln/detail/${vuln.id}`}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="inline-block px-4 py-1 text-xs border border-gray-600 text-gray-300 rounded hover:bg-gray-700 transition-colors"
                  >
                    View on NVD
                  </a>
                  <a
                    href={`https://www.cisa.gov/known-exploited-vulnerabilities-catalog`}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="inline-block ml-2 px-4 py-1 text-xs border border-cyan-600 text-cyan-400 rounded hover:bg-cyan-900/30 transition-colors"
                  >
                    Check CISA KEV
                  </a>
                </div>
              </motion.div>
            )}
          </AnimatePresence>
        </motion.div>
      ))}
    </div>
  );
};

export default VulnerabilityTable;