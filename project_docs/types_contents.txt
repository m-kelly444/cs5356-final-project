# CONTENTS OF types/
-----------------------------------------
FILE: types/threat-data.ts
-----------------------------------------
// Type definitions for cybersecurity threat data

// CISA KEV (Known Exploited Vulnerabilities) data types
export interface CisaKevVulnerability {
    cveID: string;
    vendorProject: string;
    product: string;
    vulnerabilityName: string;
    dateAdded: string;
    shortDescription: string;
    requiredAction: string;
    dueDate: string;
    notes: string;
  }
  
  export interface CisaKevCatalog {
    title: string;
    catalogVersion: string;
    dateReleased: string;
    count: number;
    vulnerabilities: CisaKevVulnerability[];
  }
  
  export interface KevStatistics {
    totalVulnerabilities: number;
    addedLast30Days: number;
    addedLast90Days: number;
    byVendor: Record<string, number>;
    remediationDueSoon: number;
  }
  
  // NVD (National Vulnerability Database) data types
  export interface NvdVulnerability {
    cve: {
      id: string;
      sourceIdentifier: string;
      published: string;
      lastModified: string;
      vulnStatus: string;
      descriptions: {
        lang: string;
        value: string;
      }[];
      metrics?: {
        cvssMetricV31?: {
          cvssData: {
            version: string;
            vectorString: string;
            attackVector: string;
            attackComplexity: string;
            privilegesRequired: string;
            userInteraction: string;
            scope: string;
            confidentialityImpact: string;
            integrityImpact: string;
            availabilityImpact: string;
            baseScore: number;
            baseSeverity: string;
          };
          exploitabilityScore: number;
          impactScore: number;
        }[];
        cvssMetricV2?: {
          cvssData: {
            version: string;
            vectorString: string;
            accessVector: string;
            accessComplexity: string;
            authentication: string;
            confidentialityImpact: string;
            integrityImpact: string;
            availabilityImpact: string;
            baseScore: number;
          };
          baseSeverity: string;
          exploitabilityScore: number;
          impactScore: number;
          acInsufInfo: boolean;
          obtainAllPrivilege: boolean;
          obtainUserPrivilege: boolean;
          obtainOtherPrivilege: boolean;
          userInteractionRequired: boolean;
        }[];
      };
      weaknesses?: {
        source: string;
        type: string;
        description: {
          lang: string;
          value: string;
        }[];
      }[];
      configurations?: {
        nodes: {
          operator: string;
          negate: boolean;
          cpeMatch: {
            vulnerable: boolean;
            criteria: string;
            matchCriteriaId: string;
-e 


-----------------------------------------
FILE: types/date-fns.d.ts
-----------------------------------------
declare module 'date-fns' {
  export function format(date: Date, formatStr: string): string;
  export function formatDistance(date: Date, baseDate: Date): string;
  export function formatRelative(date: Date, baseDate: Date): string;
  export function formatDistanceToNow(date: Date, options?: { addSuffix?: boolean }): string;
  export function isValid(date: Date): boolean;
  export function parseISO(dateString: string): Date;
} -e 


-----------------------------------------
FILE: types/env.d.ts
-----------------------------------------
declare global {
  namespace NodeJS {
    interface ProcessEnv {
      DATABASE_URL: string;
      DATABASE_AUTH_TOKEN?: string;
      VIRUSTOTAL_API_KEY?: string;
    }
  }
}

export {}; -e 


-----------------------------------------
FILE: types/api.ts
-----------------------------------------
// Type definitions for API requests and responses

import {
    CisaKevVulnerability,
    CisaKevCatalog,
    KevStatistics,
    NvdVulnerability,
    NormalizedVulnerability,
    CyberAttack,
    ThreatActor,
    PredictionResult,
    PredictionModel,
    Indicator
  } from './threat-data';
  
  // Generic API response
  export interface ApiResponse<T> {
    success: boolean;
    data?: T;
    error?: string;
    timestamp: number;
  }
  
  // Error response
  export interface ApiError {
    code: string;
    message: string;
    details?: any;
  }
  
  // Pagination params
  export interface PaginationParams {
    page?: number;
    pageSize?: number;
    startIndex?: number;
    limit?: number;
  }
  
  // Common filter parameters
  export interface FilterParams {
    from?: string | number; // date or timestamp
    to?: string | number; // date or timestamp
    sortBy?: string;
    sortOrder?: 'asc' | 'desc';
    query?: string;
    [key: string]: any; // Additional filters
  }
  
  // CISA KEV API Endpoints
  
  // GET /api/threat-data/cisa
  export interface CisaKevCatalogResponse extends ApiResponse<CisaKevCatalog> {}
  
  // GET /api/threat-data/cisa/stats
  export interface CisaKevStatsResponse extends ApiResponse<KevStatistics> {}
  
  // GET /api/threat-data/cisa/:cveId
  export interface CisaKevVulnerabilityResponse extends ApiResponse<CisaKevVulnerability | null> {}
  
  // NVD API Endpoints
  
  // GET /api/threat-data/nvd/vulnerabilities
  export interface NvdVulnerabilityParams extends PaginationParams, FilterParams {
    cveId?: string;
    keywordSearch?: string;
    pubStartDate?: string;
    pubEndDate?: string;
    lastModStartDate?: string;
    lastModEndDate?: string;
    cvssV3Severity?: 'CRITICAL' | 'HIGH' | 'MEDIUM' | 'LOW';
    cvssV2Severity?: 'HIGH' | 'MEDIUM' | 'LOW';
    cpeName?: string;
    isExploitable?: boolean;
  }
  
  export interface NvdVulnerabilityResponse extends ApiResponse<NvdVulnerability[]> {
    totalResults: number;
    resultsPerPage: number;
    startIndex: number;
  }
  
  // GET /api/threat-data/nvd/vulnerability/:cveId
  export interface NvdVulnerabilityDetailResponse extends ApiResponse<NvdVulnerability | null> {}
  
  // Predictions API Endpoints
  
  // POST /api/threat-data/predictions
  export interface PredictionRequestBody {
    targetType: string;
    targetValue: string;
    recentVulnerabilities?: number;
    avgVulnSeverity?: number;
    historicalAttackFrequency?: number;
    daysSinceLastAttack?: number;
    region?: string;
    sector?: string;
  }
  
  export interface PredictionResponse extends ApiResponse<PredictionResult> {}
  
-e 


-----------------------------------------
FILE: types/dashboard.ts
-----------------------------------------
// Type definitions for dashboard components and UI elements

import { 
    NormalizedVulnerability, 
    CyberAttack, 
    ThreatActor, 
    PredictionResult, 
    Indicator,
    KevStatistics
  } from './threat-data';
  
  // Dashboard layouts and configurations
  export interface DashboardLayout {
    id: string;
    userId: string;
    name: string;
    layout: DashboardLayoutItem[];
    createdAt: number;
    updatedAt: number;
  }
  
  export interface DashboardLayoutItem {
    id: string;
    componentType: string;
    x: number;
    y: number;
    width: number;
    height: number;
    config?: Record<string, any>;
  }
  
  // Attack Map component
  export interface AttackMapProps {
    attacks: CyberAttack[];
    threatActors?: Record<string, ThreatActor>;
    filter?: AttackMapFilter;
  }
  
  export interface AttackMapFilter {
    timeframe?: string;
    attackTypes?: string[];
    regions?: string[];
    sectors?: string[];
    minImpact?: number;
  }
  
  export interface AttackNode {
    id: string;
    source: [number, number]; // [longitude, latitude]
    target: [number, number]; // [longitude, latitude]
    attackType: string;
    impactLevel: number;
    date: string;
    sector: string;
    region: string;
  }
  
  // Threat Meter component
  export interface ThreatMeterProps {
    level: number; // 0-100
    previousLevel?: number;
    label?: string;
  }
  
  // Stats Grid component
  export interface StatsGridProps {
    kevStats: {
      totalVulnerabilities: number;
      addedLast30Days: number;
      addedLast90Days: number;
      remediationDueSoon: number;
      byVendor?: Record<string, number>;
    };
    vulnerabilityCount: {
      total: number;
      critical: number;
    };
    attackStats: {
      recentCount: number;
      predictedCount: number;
    };
  }
  
  export interface StatCard {
    title: string;
    value: number;
    trend: 'up' | 'down' | 'neutral';
    description: string;
    refKey: string;
    color: string;
    textColor: string;
  }
  
  // Prediction Card component
  export interface PredictionCardProps {
    prediction: {
      id: string;
      targetType: string;
      targetValue: string;
      attackType?: string;
-e 


-----------------------------------------
FILE: types/process.d.ts
-----------------------------------------
declare const process: {
  env: {
    DATABASE_URL: string;
    DATABASE_AUTH_TOKEN?: string;
  }
}; -e 


-----------------------------------------
FILE: types/node.d.ts
-----------------------------------------
declare namespace NodeJS {
  interface ProcessEnv {
    DATABASE_URL: string;
    DATABASE_AUTH_TOKEN?: string;
    VIRUSTOTAL_API_KEY?: string;
  }
} -e 


-----------------------------------------
FILE: types/auth.ts
-----------------------------------------
// Type definitions for authentication and user management

import { JWT } from 'next-auth/jwt';
import { Session } from 'next-auth';

// User profile
export interface User {
  id: string;
  name: string;
  email: string;
  image?: string;
  role: UserRole;
  createdAt: number;
  updatedAt: number;
}

// User roles for authorization
export type UserRole = 'user' | 'analyst' | 'admin';

// Extended JWT with custom fields
export interface ExtendedJWT extends JWT {
  id: string;
  role: UserRole;
}

// Extended Session with custom fields
export interface ExtendedSession extends Session {
  user: {
    id: string;
    name: string;
    email: string;
    image?: string;
    role: UserRole;
  };
}

// Login credentials
export interface LoginCredentials {
  email: string;
  password: string;
}

// Registration data
export interface RegistrationData {
  name: string;
  email: string;
  password: string;
  confirmPassword: string;
}

// Password reset request
export interface PasswordResetRequest {
  email: string;
}

// Password reset data
export interface PasswordResetData {
  token: string;
  newPassword: string;
  confirmPassword: string;
}

// User profile update data
export interface UserProfileUpdate {
  name?: string;
  email?: string;
  image?: string;
  currentPassword?: string;
  newPassword?: string;
  confirmPassword?: string;
}

// Auth form states
export type AuthFormState = 'idle' | 'submitting' | 'success' | 'error';

// Auth form field validation errors
export interface AuthFormErrors {
  name?: string;
  email?: string;
  password?: string;
  confirmPassword?: string;
  general?: string;
}

// API registration request body
export interface RegisterRequestBody {
  name: string;
  email: string;
  password: string;
}

// API login request body
export interface LoginRequestBody {
  email: string;
  password: string;
}

// API response for auth operations
export interface AuthApiResponse {
  success: boolean;
-e 


-----------------------------------------
FILE: types/drizzle-kit.d.ts
-----------------------------------------
declare module 'drizzle-kit' {
  export interface Config {
    schema: string;
    out: string;
    driver: string;
    dbCredentials: {
      url: string;
      authToken?: string;
    };
    tablesFilter?: string[];
    verbose?: boolean;
    strict?: boolean;
    fileName?: (timestamp: string, name?: string) => string;
  }
} -e 


