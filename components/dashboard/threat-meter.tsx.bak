'use client';
import { useState, useEffect } from 'react';

// ThreatMeter component
// A cyberpunk-styled gauge that displays the current threat level

import { useEffect, useRef } from 'react';
import * as d3 from 'd3';

interface ThreatMeterProps {
  level: number; // 0-100 threat level
}

const ThreatMeter: React.FC<ThreatMeterProps> = ({ level }) => {
  const svgRef = useRef<SVGSVGElement>(null);
  const previousLevel = useRef<number>(0);
  
  // Format the threat level text
  const threatLevelText = () => {
    if (level >= 80) return 'CRITICAL';
    if (level >= 60) return 'HIGH';
    if (level >= 40) return 'ELEVATED';
    if (level >= 20) return 'GUARDED';
    return 'LOW';
  };
  
  // Get the threat level color
  const threatLevelColor = () => {
    if (level >= 80) return '#FF0043';
    if (level >= 60) return '#FF5E00';
    if (level >= 40) return '#FFBD00';
    if (level >= 20) return '#00BFFF';
    return '#00FF66';
  };
  
  // Calculate the arc path for the gauge
  useEffect(() => {
    if (!svgRef.current) return;
    
    const svg = d3.select(svgRef.current);
    const width = 400;
    const height = 200;
    const radius = Math.min(width, height * 2) / 2;
    
    // Clear any existing content
    svg.selectAll('*').remove();
    
    // Create the SVG structure
    const g = svg.append('g')
      .attr('transform', `translate(${width / 2}, ${height})`);
    
    // Create defs for gradients and filters
    const defs = svg.append('defs');
    
    // Add glow filter
    const filter = defs.append('filter')
      .attr('id', 'glow')
      .attr('x', '-50%')
      .attr('y', '-50%')
      .attr('width', '200%')
      .attr('height', '200%');
    
    filter.append('feGaussianBlur')
      .attr('stdDeviation', '3.5')
      .attr('result', 'coloredBlur');
    
    const feMerge = filter.append('feMerge');
    feMerge.append('feMergeNode').attr('in', 'coloredBlur');
    feMerge.append('feMergeNode').attr('in', 'SourceGraphic');
    
    // Create gradient for gauge background
    const backgroundGradient = defs.append('linearGradient')
      .attr('id', 'backgroundGradient')
      .attr('x1', '0%')
      .attr('y1', '0%')
      .attr('x2', '100%')
      .attr('y2', '100%');
    
    backgroundGradient.append('stop')
      .attr('offset', '0%')
      .attr('stop-color', '#2D3747')
      .attr('stop-opacity', 1);
    
    backgroundGradient.append('stop')
      .attr('offset', '100%')
      .attr('stop-color', '#1A202C')
      .attr('stop-opacity', 1);
    
    // Create gradient for gauge fill
    const fillGradient = defs.append('linearGradient')
      .attr('id', 'fillGradient')
      .attr('x1', '0%')
      .attr('y1', '0%')
      .attr('x2', '100%')
      .attr('y2', '0%');
    
    fillGradient.append('stop')
      .attr('offset', '0%')
      .attr('stop-color', '#00FF66')
      .attr('stop-opacity', 1);
    
    fillGradient.append('stop')
      .attr('offset', '100%')
      .attr('stop-color', threatLevelColor())
      .attr('stop-opacity', 1);
    
    // Create arc generators
    const backgroundArc = d3.arc()
      .innerRadius(radius - 40)
      .outerRadius(radius - 10)
      .startAngle(-Math.PI)
      .endAngle(Math.PI / 2);
    
    const foregroundArc = d3.arc()
      .innerRadius(radius - 40)
      .outerRadius(radius - 10)
      .startAngle(-Math.PI)
      .endAngle((level / 100) * (3 * Math.PI / 2) - Math.PI);
    
    // Add background arc
    g.append('path')
      .attr('d', backgroundArc as any)
      .attr('fill', 'url(#backgroundGradient)')
      .attr('stroke', '#4A5568')
      .attr('stroke-width', 1);
    
    // Add foreground arc (the gauge level)
    g.append('path')
      .attr('d', foregroundArc as any)
      .attr('fill', 'url(#fillGradient)')
      .attr('stroke', threatLevelColor())
      .attr('stroke-width', 1)
      .attr('filter', 'url(#glow)');
    
    // Add ticks
    const tickData = [0, 20, 40, 60, 80, 100];
    
    tickData.forEach(tick => {
      const tickAngle = (tick / 100) * (3 * Math.PI / 2) - Math.PI;
      const tickInnerPoint = [(radius - 40) * Math.cos(tickAngle), (radius - 40) * Math.sin(tickAngle)];
      const tickOuterPoint = [(radius - 5) * Math.cos(tickAngle), (radius - 5) * Math.sin(tickAngle)];
      
      // Tick line
      g.append('line')
        .attr('x1', tickInnerPoint[0])
        .attr('y1', tickInnerPoint[1])
        .attr('x2', tickOuterPoint[0])
        .attr('y2', tickOuterPoint[1])
        .attr('stroke', '#CBD5E0')
        .attr('stroke-width', 2);
      
      // Tick label
      g.append('text')
        .attr('x', (radius - 55) * Math.cos(tickAngle))
        .attr('y', (radius - 55) * Math.sin(tickAngle))
        .attr('text-anchor', 'middle')
        .attr('dominant-baseline', 'middle')
        .attr('transform', `rotate(${tickAngle * 180 / Math.PI + 90}, ${(radius - 55) * Math.cos(tickAngle)}, ${(radius - 55) * Math.sin(tickAngle)})`)
        .attr('fill', '#CBD5E0')
        .attr('font-size', '12px')
        .attr('font-family', 'monospace')
        .text(tick.toString());
    });
    
    // Add needle
    const needleAngle = (level / 100) * (3 * Math.PI / 2) - Math.PI;
    const needlePoint = [(radius - 20) * Math.cos(needleAngle), (radius - 20) * Math.sin(needleAngle)];
    
    // Needle triangle
    g.append('path')
      .attr('d', `M 0,0 L ${needlePoint[0]},${needlePoint[1]} L ${needlePoint[0] * 0.98},${needlePoint[1] * 1.02} Z`)
      .attr('fill', threatLevelColor())
      .attr('filter', 'url(#glow)');
    
    // Needle center
    g.append('circle')
      .attr('cx', 0)
      .attr('cy', 0)
      .attr('r', 10)
      .attr('fill', '#2D3748')
      .attr('stroke', threatLevelColor())
      .attr('stroke-width', 2)
      .attr('filter', 'url(#glow)');
    
    // Display current level
    g.append('text')
      .attr('x', 0)
      .attr('y', -radius / 2)
      .attr('text-anchor', 'middle')
      .attr('fill', threatLevelColor())
      .attr('font-size', '24px')
      .attr('font-weight', 'bold')
      .attr('font-family', 'var(--font-cyber)')
      .attr('filter', 'url(#glow)')
      .text(threatLevelText());
    
    g.append('text')
      .attr('x', 0)
      .attr('y', -radius / 2 + 30)
      .attr('text-anchor', 'middle')
      .attr('fill', '#E2E8F0')
      .attr('font-size', '16px')
      .attr('font-family', 'var(--font-mono)')
      .text(`${Math.round(level)}%`);
    
    // Update previous level
    previousLevel.current = level;
    
  }, [level]);
  
  return (
    <div className="flex flex-col items-center w-full">
      <svg
        ref={svgRef}
        width="100%"
        height="200px"
        viewBox="0 0 400 200"
        preserveAspectRatio="xMidYMid meet"
      />
      <div className="grid grid-cols-5 w-full max-w-md mt-4">
        {['LOW', 'GUARDED', 'ELEVATED', 'HIGH', 'CRITICAL'].map((label, i) => (
          <div key={i} className="flex flex-col items-center">
            <div 
              className={`w-3 h-3 rounded-full ${
                i === 0 ? 'bg-green-500' :
                i === 1 ? 'bg-blue-500' :
                i === 2 ? 'bg-yellow-500' :
                i === 3 ? 'bg-orange-500' :
                'bg-red-500'
              }`} 
            />
            <span className="text-xs mt-1 text-gray-400">{label}</span>
          </div>
        ))}
      </div>
    </div>
  );
};

export default ThreatMeter;