'use client';


// Interactive Attack Map using D3.js
// This component visualizes cyber attacks on a world map

import { useEffect, useRef, useState } from 'react';
import * as d3 from 'd3';
import { feature } from 'topojson-client';
import { Topology, GeometryCollection } from 'topojson-specification';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';

// Types
interface Attack {
  id: string;
  attackDate: number; // Timestamp
  attackType: string;
  targetedSector: string;
  targetedRegion: string;
  impactLevel: number;
  title?: string;
  description?: string;
  source?: string;
}

interface AttackNode {
  id: string;
  source: [number, number]; // [longitude, latitude]
  target: [number, number]; // [longitude, latitude]
  attackType: string;
  impactLevel: number;
  date: string;
  sector: string;
  region: string;
  title?: string;
}

interface AttackMapProps {
  attacks: Attack[];
}

// Country code to coordinates mapping (based on real country locations)
const regionCoordinates: Record<string, [number, number]> = {
  'North America': [-100.0, 45.0],
  'United States': [-98.5795, 39.8283],
  'Canada': [-106.3468, 56.1304],
  'Mexico': [-102.5528, 23.6345],
  'Europe': [15.2551, 54.5260],
  'United Kingdom': [-3.4360, 55.3781],
  'Germany': [10.4515, 51.1657],
  'France': [2.2137, 46.2276],
  'Italy': [12.5674, 41.8719],
  'Spain': [-3.7492, 40.4637],
  'Asia': [100.6197, 34.0479],
  'China': [104.1954, 35.8617],
  'Japan': [138.2529, 36.2048],
  'India': [78.9629, 20.5937],
  'Middle East': [53.4949, 29.3375],
  'Africa': [20.2023, 6.3981],
  'South America': [-58.9301, -14.7052],
  'Brazil': [-51.9253, -14.2350],
  'Australia': [133.7751, -25.2744],
  'Global': [0, 0], // Center of the map
};

// Map attack types to colors
const attackTypeColors: Record<string, string> = {
  'ransomware': '#FF0059',
  'dataBreach': '#00FFFF',
  'ddos': '#FFD700',
  'phishing': '#00FF59',
  'malwareInfection': '#FF00FF',
  'zeroDay': '#9C59FF',
  'supplyChain': '#FF8000',
  'insiderThreat': '#00B3FF',
  'default': '#9C59FF'
};

const AttackMap: React.FC<AttackMapProps> = ({ attacks }) => {
  const svgRef = useRef<SVGSVGElement>(null);
  const tooltipRef = useRef<HTMLDivElement>(null);
  const [worldData, setWorldData] = useState<any>(null);
  const [dimensions, setDimensions] = useState({ width: 0, height: 0 });
  const [activeAttack, setActiveAttack] = useState<AttackNode | null>(null);
  const [filters, setFilters] = useState({
    attackTypes: [] as string[],
    regions: [] as string[],
    sectors: [] as string[],
    minImpact: 0
  });
  
  // Handle resize for responsive design
  useEffect(() => {
    const handleResize = () => {
      if (svgRef.current) {
        const { width } = svgRef.current.getBoundingClientRect();
        setDimensions({ width, height: width * 0.5 });
      }
    };
    
    handleResize();
    typeof window !== 'undefined' ? typeof window !== 'undefined' && window.addEventListener('resize', handleResize);
    
    return () => {
      typeof window !== 'undefined' ? typeof window !== 'undefined' && window.removeEventListener('resize', handleResize);
    };
  }, []);
  
  // Fetch world map data
  useEffect(() => {
    const fetchGeoData = async () => {
      try {
        const response = await fetch('/data/world-110m.json');
        const data = await response.json();
        setWorldData(data);
      } catch (error) {
        console.error('Error fetching world map data:', error);
      }
    };
    
    fetchGeoData();
  }, []);
  
  // Process attacks into nodes with coordinates
  const processAttacks = (): AttackNode[] => {
    if (!attacks?.length) return [];
    
    return attacks
      .filter(attack => {
        // Apply filters
        const passesTypeFilter = filters.attackTypes.length === 0 || 
          filters.attackTypes.includes(attack.attackType);
        const passesRegionFilter = filters.regions.length === 0 || 
          filters.regions.includes(attack.targetedRegion);
        const passesSectorFilter = filters.sectors.length === 0 || 
          filters.sectors.includes(attack.targetedSector);
        const passesImpactFilter = attack.impactLevel >= filters.minImpact;
        
        return passesTypeFilter && passesRegionFilter && 
          passesSectorFilter && passesImpactFilter;
      })
      .map(attack => {
        // Get source coordinates (random point for visual variety)
        const sourceRegion = Object.keys(regionCoordinates).find(r => 
          Math.random() > 0.7 ? true : r !== attack.targetedRegion
        ) || 'Global';
        
        const sourceCoords = regionCoordinates[sourceRegion] || [0, 0];
        // Add some randomness to source coordinates
        const jitteredSourceCoords: [number, number] = [
          sourceCoords[0] + (Math.random() * 20 - 10),
          sourceCoords[1] + (Math.random() * 20 - 10)
        ];
        
        // Get target coordinates
        const targetCoords = regionCoordinates[attack.targetedRegion] || [0, 0];
        // Add some randomness to target coordinates
        const jitteredTargetCoords: [number, number] = [
          targetCoords[0] + (Math.random() * 10 - 5),
          targetCoords[1] + (Math.random() * 10 - 5)
        ];
        
        // Format date
        const date = new Date(attack.attackDate).toLocaleDateString(undefined, {
          year: 'numeric',
          month: 'short',
          day: 'numeric'
        });
        
        return {
          id: attack.id,
          source: jitteredSourceCoords,
          target: jitteredTargetCoords,
          attackType: attack.attackType,
          impactLevel: attack.impactLevel,
          date,
          sector: attack.targetedSector,
          region: attack.targetedRegion,
          title: attack.title
        };
      });
  };
  
  // Render map
  useEffect(() => {
    if (!svgRef.current || !worldData || !dimensions.width) return;
    
    const svg = d3.select(svgRef.current);
    svg.selectAll('*').remove();
    
    const { width, height } = dimensions;
    
    // Create projection
    const projection = d3.geoMercator()
      .fitSize([width, height], feature(worldData, worldData.objects.countries))
      .center([0, 20])
      .scale(width / 6)
      .translate([width / 2, height / 2]);
    
    // Create path generator
    const pathGenerator = d3.geoPath()
      .projection(projection);
    
    // Draw background
    svg.append('rect')
      .attr('width', width)
      .attr('height', height)
      .attr('fill', '#0F172A')
      .attr('rx', 8)
      .attr('ry', 8);
    
    // Create container for countries
    const mapGroup = svg.append('g')
      .attr('class', 'map-group');
    
    // Draw countries
    mapGroup.append('g')
      .attr('class', 'countries')
      .selectAll('path')
      .data(feature(worldData, worldData.objects.countries).features)
      .enter()
      .append('path')
      .attr('d', pathGenerator)
      .attr('fill', '#1E293B')
      .attr('stroke', '#0F172A')
      .attr('stroke-width', 0.5);
    
    // Draw longitude/latitude grid
    const gridGroup = svg.append('g')
      .attr('class', 'grid-lines')
      .attr('stroke', '#334155')
      .attr('stroke-width', 0.2)
      .attr('stroke-dasharray', '2,2');
    
    // Longitude lines
    for (let i = -180; i <= 180; i += 30) {
      const lineData = [
        { lon: i, lat: -85 },
        { lon: i, lat: 85 }
      ];
      
      const lineGenerator = d3.line<{lon: number, lat: number}>()
        .x(d => projection([d.lon, d.lat])![0])
        .y(d => projection([d.lon, d.lat])![1]);
      
      gridGroup.append('path')
        .attr('d', lineGenerator(lineData))
        .attr('fill', 'none');
    }
    
    // Latitude lines
    for (let i = -60; i <= 80; i += 30) {
      const lineData = [];
      for (let lon = -180; lon <= 180; lon += 5) {
        lineData.push({ lon, lat: i });
      }
      
      const lineGenerator = d3.line<{lon: number, lat: number}>()
        .x(d => projection([d.lon, d.lat])![0])
        .y(d => projection([d.lon, d.lat])![1])
        .curve(d3.curveCardinal);
      
      gridGroup.append('path')
        .attr('d', lineGenerator(lineData))
        .attr('fill', 'none');
    }
    
    // Process attack data
    const attackNodes = processAttacks();
    
    // Create attack lines
    const attackLinesGroup = svg.append('g')
      .attr('class', 'attack-lines');
    
    // Draw attack lines
    attackNodes.forEach((attack, i) => {
      const source = projection(attack.source)!;
      const target = projection(attack.target)!;
      
      // Calculate curved path
      const dx = target[0] - source[0];
      const dy = target[1] - source[1];
      const dr = Math.sqrt(dx * dx + dy * dy) * 1.2;
      
      // Draw curved line
      attackLinesGroup.append('path')
        .attr('d', `M${source[0]},${source[1]}A${dr},${dr} 0 0,1 ${target[0]},${target[1]}`)
        .attr('fill', 'none')
        .attr('stroke', attackTypeColors[attack.attackType] || attackTypeColors.default)
        .attr('stroke-width', Math.min(3, attack.impactLevel / 3))
        .attr('stroke-dasharray', `${attack.impactLevel * 2},${attack.impactLevel}`)
        .attr('opacity', 0.7)
        .attr('class', 'attack-line')
        .style('filter', 'url(#glow)')
        .style('animation', `pulse ${3 + Math.random() * 2}s infinite alternate`);
      
      // Add a moving dot along the path
      const path = attackLinesGroup.select('path').node();
      
      if (path) {
        // Draw animated dot
        attackLinesGroup.append('circle')
          .attr('r', attack.impactLevel / 3 + 1)
          .attr('fill', attackTypeColors[attack.attackType] || attackTypeColors.default)
          .attr('opacity', 0.8)
          .attr('class', 'attack-dot')
          .style('filter', 'url(#glow)')
          .attr('transform', `translate(${source[0]}, ${source[1]})`)
          .on('mouseover', function(event) {
            setActiveAttack(attack);
            
            if (tooltipRef.current) {
              tooltipRef.current.style.left = `${event.pageX + 10}px`;
              tooltipRef.current.style.top = `${event.pageY + 10}px`;
              tooltipRef.current.style.display = 'block';
            }
          })
          .on('mouseout', function() {
            setActiveAttack(null);
            
            if (tooltipRef.current) {
              tooltipRef.current.style.display = 'none';
            }
          });
      }
    });
    
    // Add SVG defs for filter effects
    const defs = svg.append('defs');
    
    // Add glow filter
    const filter = defs.append('filter')
      .attr('id', 'glow')
      .attr('x', '-50%')
      .attr('y', '-50%')
      .attr('width', '200%')
      .attr('height', '200%');
    
    filter.append('feGaussianBlur')
      .attr('stdDeviation', 2.5)
      .attr('result', 'coloredBlur');
    
    const feMerge = filter.append('feMerge');
    feMerge.append('feMergeNode').attr('in', 'coloredBlur');
    feMerge.append('feMergeNode').attr('in', 'SourceGraphic');
    
    // Add target markers
    const targetMarkers = svg.append('g')
      .attr('class', 'target-markers');
    
    attackNodes.forEach((attack) => {
      const target = projection(attack.target)!;
      
      // Draw pulse animation
      targetMarkers.append('circle')
        .attr('cx', target[0])
        .attr('cy', target[1])
        .attr('r', 5 + (attack.impactLevel / 2))
        .attr('fill', 'none')
        .attr('stroke', attackTypeColors[attack.attackType] || attackTypeColors.default)
        .attr('stroke-width', 1)
        .attr('opacity', 0.8)
        .attr('class', 'target-pulse')
        .style('animation', `pulse-expand 3s infinite`);
      
      // Draw target point
      targetMarkers.append('circle')
        .attr('cx', target[0])
        .attr('cy', target[1])
        .attr('r', 3 + (attack.impactLevel / 10))
        .attr('fill', attackTypeColors[attack.attackType] || attackTypeColors.default)
        .attr('opacity', 0.9)
        .attr('class', 'target-point')
        .style('filter', 'url(#glow)')
        .on('mouseover', function(event) {
          setActiveAttack(attack);
          
          if (tooltipRef.current) {
            tooltipRef.current.style.left = `${event.pageX + 10}px`;
            tooltipRef.current.style.top = `${event.pageY + 10}px`;
            tooltipRef.current.style.display = 'block';
          }
        })
        .on('mouseout', function() {
          setActiveAttack(null);
          
          if (tooltipRef.current) {
            tooltipRef.current.style.display = 'none';
          }
        });
    });
    
  }, [worldData, dimensions, attacks, filters]);
  
  // Get unique filter values
  const getUniqueAttackTypes = () => {
    return [...new Set(attacks.map(a => a.attackType))];
  };
  
  const getUniqueRegions = () => {
    return [...new Set(attacks.map(a => a.targetedRegion))];
  };
  
  const getUniqueSectors = () => {
    return [...new Set(attacks.map(a => a.targetedSector))];
  };
  
  // Toggle filter item
  const toggleFilter = (type: 'attackTypes' | 'regions' | 'sectors', value: string) => {
    setFilters(prev => {
      if (prev[type].includes(value)) {
        return {
          ...prev,
          [type]: prev[type].filter(v => v !== value)
        };
      } else {
        return {
          ...prev,
          [type]: [...prev[type], value]
        };
      }
    });
  };
  
  // Reset filters
  const resetFilters = () => {
    setFilters({
      attackTypes: [],
      regions: [],
      sectors: [],
      minImpact: 0
    });
  };
  
  // Get color for attack type
  const getAttackTypeColor = (type: string) => {
    return attackTypeColors[type] || attackTypeColors.default;
  };
  
  return (
    <div className="w-full space-y-4">
      {/* Filters */}
      <div className="mb-4 grid grid-cols-1 md:grid-cols-3 gap-4">
        {/* Attack type filters */}
        <Card variant="cyberOutline" className="p-3">
          <h3 className="text-sm font-semibold mb-2">Attack Types</h3>
          <div className="flex flex-wrap gap-2">
            {getUniqueAttackTypes().map(type => (
              <Button
                key={type}
                size="sm"
                variant={filters.attackTypes.includes(type) ? "cyber" : "cyberGhost"}
                className="text-xs"
                onClick={() => toggleFilter('attackTypes', type)}
              >
                <span 
                  className="w-2 h-2 rounded-full mr-1" 
                  style={{ backgroundColor: getAttackTypeColor(type) }}
                />
                {type}
              </Button>
            ))}
          </div>
        </Card>
        
        {/* Region filters */}
        <Card variant="cyberOutline" className="p-3">
          <h3 className="text-sm font-semibold mb-2">Regions</h3>
          <div className="flex flex-wrap gap-2">
            {getUniqueRegions().map(region => (
              <Button
                key={region}
                size="sm"
                variant={filters.regions.includes(region) ? "cyber" : "cyberGhost"}
                className="text-xs"
                onClick={() => toggleFilter('regions', region)}
              >
                {region}
              </Button>
            ))}
          </div>
        </Card>
        
        {/* Sector filters */}
        <Card variant="cyberOutline" className="p-3">
          <h3 className="text-sm font-semibold mb-2">Sectors</h3>
          <div className="flex flex-wrap gap-2">
            {getUniqueSectors().map(sector => (
              <Button
                key={sector}
                size="sm"
                variant={filters.sectors.includes(sector) ? "cyber" : "cyberGhost"}
                className="text-xs"
                onClick={() => toggleFilter('sectors', sector)}
              >
                {sector}
              </Button>
            ))}
          </div>
        </Card>
      </div>
      
      {/* Reset filters button */}
      {(filters.attackTypes.length > 0 || filters.regions.length > 0 || filters.sectors.length > 0) && (
        <div className="flex justify-end mb-2">
          <Button variant="cyberGhost" size="sm" onClick={resetFilters}>
            Reset Filters
          </Button>
        </div>
      )}
      
      {/* Map container */}
      <div className="relative w-full h-full rounded-lg overflow-hidden border border-gray-800">
        <svg
          ref={svgRef}
          width="100%"
          height="100%"
          viewBox={`0 0 ${dimensions.width} ${dimensions.height}`}
          preserveAspectRatio="xMidYMid meet"
          className="bg-gray-900/50 rounded-lg"
        />
        
        {/* Tooltip */}
        <div
          ref={tooltipRef}
          className="absolute hidden p-3 bg-gray-900/90 backdrop-blur-md border border-gray-700 rounded-md shadow-lg z-10 max-w-xs"
          style={{ pointerEvents: 'none' }}
        >
          {activeAttack && (
            <div className="space-y-1 text-sm">
              <div className="font-bold text-white">
                {activeAttack.title || `${activeAttack.attackType} Attack`}
              </div>
              <div className="flex items-center gap-2">
                <span
                  className="w-2 h-2 rounded-full"
                  style={{ backgroundColor: getAttackTypeColor(activeAttack.attackType) }}
                />
                <span className="text-gray-300">{activeAttack.attackType}</span>
              </div>
              <div className="text-gray-400">
                Target: {activeAttack.region}
              </div>
              <div className="text-gray-400">
                Sector: {activeAttack.sector}
              </div>
              <div className="text-gray-400">
                Date: {activeAttack.date}
              </div>
              <div className="text-gray-400">
                Impact: {activeAttack.impactLevel}/10
              </div>
            </div>
          )}
        </div>
      </div>
      
      {/* Legend */}
      <div className="flex justify-center mt-4 flex-wrap gap-4">
        {getUniqueAttackTypes().map(type => (
          <div key={type} className="flex items-center space-x-2">
            <div
              className="w-3 h-3 rounded-full"
              style={{ backgroundColor: getAttackTypeColor(type) }}
            />
            <span className="text-xs text-gray-400">{type}</span>
          </div>
        ))}
      </div>
      
      {/* CSS for animations */}
      <style jsx global>{`
        @keyframes pulse {
          0% { opacity: 0.3; }
          50% { opacity: 0.8; }
          100% { opacity: 0.3; }
        }
        
        @keyframes pulse-expand {
          0% { transform: scale(0.5); opacity: 0.8; }
          100% { transform: scale(1.5); opacity: 0; }
        }
      `}</style>
    </div>
  );
};

export default AttackMap;